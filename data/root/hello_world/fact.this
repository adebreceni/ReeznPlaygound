{"content":"class State{\n\tregs: {eax: i32, ebx: i32}\n\tresult: Bool\n}\n\ndef _fact(n: i32): `n*_fact(n-1)` = {}\n\ndef fact(in: symbolic State): \n\t`in` with {regs: `in.regs` with {eax: `_fact(in.regs.eax)`}} = {\n\n\tval n = RegExpr(\"eax\")\t\n\n\twhile((s: State)=>n.>(0) using (s))\n}\n\n\nclass while[In <: State, Out <: State]{\n\tcond: (in: In)=>Out\n\tdef do(fn: (in: Out)=>In): In\n}\n\nclass RegExpr{\n\tname: \"eax\"|\"ebx\"\n\tdef >(const: i32) using (in: State): \n\t\t`in` with {result: `in.regs.(name) > const`}\n}"}