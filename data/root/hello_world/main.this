{"content":"class State{\n\tvars: {x: i32}\n\tresult: i32 >: i32\n}\n\nclass Expr{}\n\nclass VarExpr = Expr{self=>\n\tname: String\n\tdef call(in: {vars: {(self.name): i32}, result >: i32}): \n\t\t`in` with {result: `in.vars.(self.name)`}\n\tdef ++ using (_in: {vars: {(self.name): i32}}): \n\t\t`_in` with {vars: `_in.vars` with {(self.name): `_in.vars.(self.name)+1`}}\n}\n\nclass if{\n\tin: State\n\tcond: Expr\n\tdef then[T](fn: (in: `this.cond.call(this.in)`, p: `in.result` & true)=>T): T\n}\n\ndef main(in: State) = {\n\tval x = VarExpr[i32](\"x\")\n\tval out = x.call(in).result\n\n\timplicit for State = in\n\tval out2 = x++(in)\n\tval xx = out2.vars.x\n}","test_result":{"errors":[],"annotations":[]}}