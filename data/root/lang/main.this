{"content":"class HState{\n\tval x: i32\n}\n\nclass LState{\n\tval eax: i32\n}\n\nclass Lincr{\n\tdef apply(state: symbolic LState): `state` with {val eax: `state.eax + 1`}\n}\n\nclass Hincr{\n\tdef apply(state: symbolic HState): `state` with {val x: `state.x + 1`}\n}\n\ndef compile[In <: HState, Out <: HState](code: (state: symbolic In)=>Out): ","test_result":{"errors":[],"annotations":[]}}