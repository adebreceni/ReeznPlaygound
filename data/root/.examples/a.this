{"content":"type X{ x =>\n\tval x : Int\n\tdef +(a: Int): Int\n}\n\ntype Z[T]{\n\ttype Out = T\n\tdef f(x: T): String\n\tdef f(x: String): T\n\tdef g[U <: T](a: T): U\n\tdef +(other: T): X\n}\n\ntype Convert[T] = T match {\n\tcase Int => String\n\tcase Z[a] => a\n}\n\ntype Converted = [Convert[Int], Convert[Z[X]], Convert[String]]\n\nsealed type Option[+T]\nfinal type None = Option[Nothing]\nfinal type Some[+T] = Option[T] with {\n\tval value: T\n}\ntype Int\n\ntype A = X\n\ntype E[T[_ <: Int >: String] <: Any] = T\n\ntype List[T]{\n\t[A, B] override def ::(x: T): List[T]\n}\n\ndef f(y: Z[Int]): A = {\n\timport y.{f => g}\n\ttype Out\n\tval x: y.Out = 4\n\tval a: List[X] = y.f(1)\n\t3 :: a\n\tval b: Z[3] = 1f64;\n\tb.f(2u8)\n\tb + \"yes\" + 4u8\n\tb.g[A](\"abcd\")\n\ty.g[Some](1)\n\t5 match {\n\t\tcase T(a: X, b @ _) :: c => b\n\t}\n}","test_result":{"errors":[{"range":{"start":{"row":36,"column":11},"end":{"row":36,"column":12}},"message":"Multiple member named \"f\""},{"range":{"start":{"row":40,"column":3},"end":{"row":40,"column":5}},"message":"Not available in this scope"},{"range":{"start":{"row":21,"column":18},"end":{"row":21,"column":24}},"message":"Can only evaluate higher order types"},{"range":{"start":{"row":22,"column":22},"end":{"row":22,"column":28}},"message":"Can only evaluate higher order types"},{"range":{"start":{"row":44,"column":5},"end":{"row":44,"column":6}},"message":"Invalid type argument"},{"range":{"start":{"row":45,"column":5},"end":{"row":45,"column":9}},"message":"Invalid type argument"}],"annotations":[{"position":{"row":38,"column":17},"segments":[{"value":": "},{"value":"4","error":"Not assignable to Int"}]},{"position":{"row":39,"column":23},"segments":[{"value":": "},{"value":"1","error":"Not assignable to Int"}]},{"position":{"row":39,"column":24},"segments":[{"value":": "},{"value":"`y.f(1)`","error":"Not assignable to {\n\tval:::(x:X)=>List[X]\n}"}]},{"position":{"row":40,"column":2},"segments":[{"value":": "},{"value":"3","error":"Not assignable to X"}]},{"position":{"row":41,"column":19},"segments":[{"value":": "},{"value":"1f64","error":"Not assignable to {\n\ttypeOut:<Z[T]>typeOut=3\n\tvalf:(x:3)=>String\n\tvalf:(x:String)=>3\n\tvalg:[U<:3](a:3)=>U\n\tval+:(other:3)=>X\n}"}]},{"position":{"row":42,"column":8},"segments":[{"value":": "},{"value":"2u8","error":"Not assignable to 3"}]},{"position":{"row":43,"column":16},"segments":[{"value":": "},{"value":"4u8","error":"Not assignable to Int"}]},{"position":{"row":44,"column":14},"segments":[{"value":": "},{"value":"\"abcd\"","error":"Not assignable to 3"}]},{"position":{"row":45,"column":12},"segments":[{"value":": "},{"value":"1","error":"Not assignable to Int"}]},{"position":{"row":49,"column":1},"segments":[{"value":": "},{"value":"`__BlockExpression.ToValueImpl is unimplemented__`","error":"Not assignable to A"}]},{"position":{"row":39,"column":22},"segments":[{"value":"x"},{"value":"="}]},{"position":{"row":42,"column":5},"segments":[{"value":"x"},{"value":"="}]},{"position":{"row":44,"column":8},"segments":[{"value":"a"},{"value":"="}]},{"position":{"row":45,"column":11},"segments":[{"value":"a"},{"value":"="}]}]}}